Convolutional Neural Networks (CNNs)
CNNs are primarily used for processing grid-like data, such as images. They use convolutional layers to detect spatial hierarchies in the input data.
The convolution operation can be represented as:

(f∗g)(t)=∫ −∞ ∞  f(τ)g(t−τ)dτ

In discrete form, for 2D images:
(I∗K)(i,j)=∑ m ∑ n I(m,n)K(i−m,j−n)

Where:
I is the input image
K is the kernel
i,j are the coordinates of the output pixel

Here's a basic implementation of a convolutional layer in Python:

import numpy as np

def convolve2d(image, kernel):
    i_height, i_width = image.shape
    k_height, k_width = kernel.shape
    
    output = np.zeros((i_height - k_height + 1, i_width - k_width + 1))
    
    for i in range(output.shape[0]):
        for j in range(output.shape[1]):
            output[i, j] = np.sum(image[i:i+k_height, j:j+k_width] * kernel)
    
    return output

# Example usage
image = np.random.randn(28, 28)
kernel = np.random.randn(3, 3)
output = convolve2d(image, kernel)
print(output.shape)
