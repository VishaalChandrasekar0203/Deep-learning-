Long Short-Term Memory Networks (LSTMs)
LSTMs are a special kind of RNN designed to capture long-term dependencies. They use a more complex structure with gates to control the flow of information.
The LSTM computations can be represented as:








Here's a basic implementation of an LSTM cell:

import numpy as np

class LSTMCell:
    def __init__(self, input_size, hidden_size):
        self.Wf = np.random.randn(input_size + hidden_size, hidden_size)
        self.Wi = np.random.randn(input_size + hidden_size, hidden_size)
        self.Wc = np.random.randn(input_size + hidden_size, hidden_size)
        self.Wo = np.random.randn(input_size + hidden_size, hidden_size)
        self.bf = np.zeros((1, hidden_size))
        self.bi = np.zeros((1, hidden_size))
        self.bc = np.zeros((1, hidden_size))
        self.bo = np.zeros((1, hidden_size))

    def forward(self, x, h_prev, c_prev):
        z = np.column_stack((h_prev, x))
        f = self.sigmoid(np.dot(z, self.Wf) + self.bf)
        i = self.sigmoid(np.dot(z, self.Wi) + self.bi)
        c_tilde = np.tanh(np.dot(z, self.Wc) + self.bc)
        c = f * c_prev + i * c_tilde
        o = self.sigmoid(np.dot(z, self.Wo) + self.bo)
        h = o * np.tanh(c)
        return h, c

    def sigmoid(self, x):
        return 1 / (1 + np.exp(-x))

# Usage
lstm_cell = LSTMCell(input_size=10, hidden_size=20)
x = np.random.randn(1, 10)
h_prev = np.zeros((1, 20))
c_prev = np.zeros((1, 20))
h_next, c_next = lstm_cell.forward(x, h_prev, c_prev)
print(h_next.shape, c_next.shape)
